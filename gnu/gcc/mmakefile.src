# Copyright © 2004-2025, The AROS Development Team. All rights reserved.
# $Id$

include $(SRCDIR)/config/aros-contrib.cfg

#MM- contrib-gnu : contrib-gnu-gcc
#MM- contrib-gnu-gcc : development-collect-aros development-gcc
#MM- development-gcc : development-gmp development-mpfr development-mpc
#MM- development-gcc : contrib-development-libs-gc

#
# default build values and flags...
#

GCC_VERSION     = $(TARGET_GCC_VER)
ifeq (,$(findstring -,$(GCC_VERSION)))
    REPOSITORIES := $(GNU_REPOSITORY)/gcc/gcc-$(GCC_VERSION) \
        http://mirrors.ibiblio.org/gnu/ftp/gnu/gcc/gcc-$(GCC_VERSION) \
        https://ftp.wayne.edu/gnu/gcc/gcc-$(GCC_VERSION)
else
    REPOSITORIES := ftp://ftp.mirrorservice.org/sites/sourceware.org/pub/gcc/snapshots/$(GCC_VERSION)
endif

GCC_LANGUAGES:=c,c++
ifneq (no-objc,$(OBJC_TARGET))
GCC_LANGUAGES:=$(GCC_LANGUAGES),objc
endif
ifneq (no-java,$(JAVA_TARGET))
GCC_LANGUAGES:=$(GCC_LANGUAGES),java
endif

#
# ARM requires additional flags to determine CPU type and FP model
#
ifneq (,$(findstring arm,$(AROS_TARGET_CPU)))
GCC_ISA_FLAGS := $(TARGET_ISA_CFLAGS)
GCC_EXTRA_OPTS += --with-arch=$(GCC_DEFAULT_CPU)
GCC_EXTRA_OPTS += --with-float=$(GCC_DEFAULT_FLOAT_ABI)
GCC_EXTRA_OPTS += --with-fpu=$(GCC_DEFAULT_FPU)
GCC_EXTRA_OPTS += --with-mode=$(GCC_DEFAULT_MODE)
GCC_EXTRA_OPTS += --disable-libunwind-exceptions
GCC_HOST_VARS += \
	enable_libatomic=no
else
GCC_ISA_FLAGS := 
endif

GCC_EXTRA_OPTS += --with-sysroot=/$(AROS_DIR_DEVELOPMENT)
GCC_EXTRA_OPTS += --with-build-sysroot=$(AROS_DEVELOPMENT)
GCC_EXTRA_OPTS += --with-native-system-header-dir=/include
GCC_EXTRA_OPTS += --enable-languages=$(strip $(GCC_LANGUAGES))
GCC_EXTRA_OPTS += --enable-long-long
GCC_EXTRA_OPTS += --enable-version-specific-runtime-libs
GCC_EXTRA_OPTS += --enable-frame-pointer
GCC_EXTRA_OPTS += --with-dwarf2
GCC_EXTRA_OPTS += --disable-sjlj-exceptions
GCC_EXTRA_OPTS += --disable-tls
GCC_EXTRA_OPTS += --disable-objc-gc
GCC_EXTRA_OPTS += --disable-plugins
GCC_EXTRA_OPTS += --disable-libssp
GCC_EXTRA_OPTS += --disable-libstdcxx-pch
GCC_EXTRA_OPTS += --disable-build-with-cxx
GCC_EXTRA_OPTS += --disable-build-poststage1-with-cxx

# START ISA WORKAROUND
# NB: because we are crosscompiling a native compiler
#       (a) we need to specify crosscompile=yes to the build macro
#            so that it does not define CC/CXX, and let configure
#            determine the appropriate tools
#       (b) provide wrappers to make sure the build systems cross compiler
#            is invoked correctly for (e.g. multilib) targets.
#

$(TOOLDIR)/% : $(SRCDIR)/$(CURDIR)/target-tool.in
	@$(ECHO) "Creating cross-compile wrapper for $@"
	@$(SED) -e 's#@aros_wraptarget_tool@#$(CROSSTOOLSDIR)/$*#g' \
		-e 's#@aros_wraptarget_args@#--sysroot $(AROS_DEVELOPMENT) $(GCC_ISA_FLAGS)#g' \
		$< > $@ && chmod 0744 $@

GCC_HOST_VARS += \
	am_cv_lib_iconv=no \
	am_cv_func_iconv=no \
	ac_cv_header_iconv_h=no

$(GENDIR)/$(CURDIR):
	%mkdirs_q $@

$(GENDIR)/$(CURDIR)/.gcc.tool.wrappers : $(TOOLDIR)/$(AROS_TARGET_CPU)-aros-gcc $(TOOLDIR)/$(AROS_TARGET_CPU)-aros-g++ | $(GENDIR)/$(CURDIR)
	@$(TOUCH) $(GENDIR)/$(CURDIR)/.gcc.tool.wrappers

#MM
development-gcc-genwrappers : $(GENDIR)/$(CURDIR)/.gcc.tool.wrappers

#MM development-gcc--fetch : development-gcc-genwrappers

development-gcc--TARGET_CC := $(TOOLDIR)/$(AROS_TARGET_CPU)-aros-gcc
development-gcc--TARGET_CXX := $(TOOLDIR)/$(AROS_TARGET_CPU)-aros-g++
# END ISA WORKAROUND

NOWARN_FLAGS := $(NOWARN_IMPLICIT_FUNCTION_DECL) $(NOWARN_INT_CONVERSION)
USER_CPPFLAGS := -DNO_AMIGA_LINKAGE_TYPES
USER_CFLAGS := $(NOWARN_FLAGS) $(USER_CPPFLAGS)
GCC_HOST_VARS += CPPFLAGS_FOR_BUILD="$(USER_CPPFLAGS)"

#
# Rules to build the native GCC compiler.
#
%fetch_and_build_gnu_development package=gcc version=$(GCC_VERSION) crossbuild=yes patch=yes \
    package_repo="$(REPOSITORIES)" suffixes="tar.bz2 tar.gz tar.xz" \
    config_env_extra=$(GCC_HOST_VARS) extraoptions=$(GCC_EXTRA_OPTS) \
    usecppflags=no usecflags=no usecxxflags=no \
    kernelisaflags= targetisaflags= \
    postinstall=contrib-gnu-gcc-postinstall

$(development-gcc--configflag) : $(GENDIR)/$(CURDIR)/.gcc.tool.wrappers

#MM
contrib-gnu-gcc-deletefixed:
	@$(IF) $(TEST) -f "$(TOOLDIR)/$(AROS_TARGET_CPU)-aros-gcc"; then \
	  $(ECHO) "Removing cross-compiler wrapper $(TOOLDIR)/$(AROS_TARGET_CPU)-aros-gcc"; \
	  $(RM) $(TOOLDIR)/$(AROS_TARGET_CPU)-aros-gcc; \
	fi; \
	$(IF) $(TEST) -f "$(TOOLDIR)/$(AROS_TARGET_CPU)-aros-g++"; then \
	  $(ECHO) "Removing cross-compiler wrapper $(TOOLDIR)/$(AROS_TARGET_CPU)-aros-g++"; \
	  $(RM) $(TOOLDIR)/$(AROS_TARGET_CPU)-aros-g++; \
	fi; \
	FIXED_INCLUDES=`grep -lr "DO NOT EDIT THIS FILE" $(AROS_LIB)/gcc/$(AROS_TARGET_CPU)-aros/$(GCC_VERSION)/include`; \
	$(IF) $(TEST) -n "$$FIXED_INCLUDES"; then \
	  $(ECHO) "Removing fixed includes: " $$FIXED_INCLUDES; \
	  $(RM) $$FIXED_INCLUDES; \
	else \
	  $(ECHO) "No fixed includes to remove."; \
	fi; \
	unset FIXED_INCLUDES;

# Manual libatomic build

LIBATOMIC_OBJDIR := $(GENDIR)/$(CURDIR)/gcc/$(AROS_TARGET_CPU)-aros/libatomic
LIBATOMIC_SRCDIR := $(PORTSDIR)/gcc/gcc-$(GCC_VERSION)/libatomic

%build_with_configure mmake=development-gcc-libatomic srcdir="$(LIBATOMIC_SRCDIR)" \
	basedir= gendir="$(LIBATOMIC_OBJDIR)"

#MM contrib-gnu-gcc-deletefixed : contrib-gnu-gcc-libatomic-$(AROS_TARGET_CPU)

#MM- contrib-gnu-gcc-libatomic-arm : development-gcc-libatomic
#MM- contrib-gnu-gcc-postinstall : contrib-gnu-gcc-deletefixed

%common
