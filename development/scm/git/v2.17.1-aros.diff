diff -ruN -X ./exclude.patterns git-2.17.1/abspath.c git-2.17.1.aros/abspath.c
--- git-2.17.1/abspath.c	2018-05-22 05:28:26.000000000 +0000
+++ git-2.17.1.aros/abspath.c	2025-06-07 17:53:34.254350098 +0000
@@ -8,6 +8,15 @@
 int is_directory(const char *path)
 {
 	struct stat st;
+#if defined(__AROS__)
+	char *marker;
+	/* Dont test URL's on AROS */
+	if ((marker = strchr(path, ':')) != NULL)
+	{
+		if ((marker[1] == '/') && (marker[2] == '/'))
+			return 0;
+	}
+#endif
 	return (!stat(path, &st) && S_ISDIR(st.st_mode));
 }
 
diff -ruN -X ./exclude.patterns git-2.17.1/common-main.c git-2.17.1.aros/common-main.c
--- git-2.17.1/common-main.c	2018-05-22 05:28:26.000000000 +0000
+++ git-2.17.1.aros/common-main.c	2025-06-07 17:53:34.254350098 +0000
@@ -13,6 +13,12 @@
  * Restore the way SIGPIPE is handled to default, which is what we
  * expect.
  */
+
+#ifdef __AROS__
+#include <proto/exec.h>
+struct Library *SocketBase = NULL;
+#endif
+
 static void restore_sigpipe_to_default(void)
 {
 	sigset_t unblock;
@@ -25,6 +31,8 @@
 
 int main(int argc, const char **argv)
 {
+	int retval = 1;
+
 	/*
 	 * Always open file descriptors 0/1/2 to avoid clobbering files
 	 * in die().  It also avoids messing up when the pipes are dup'ed
@@ -40,5 +48,14 @@
 
 	restore_sigpipe_to_default();
 
-	return cmd_main(argc, argv);
+#ifdef __AROS__
+	if ((SocketBase = OpenLibrary("bsdsocket.library", 4)) != NULL)
+	{
+#endif
+	retval = cmd_main(argc, argv);
+#ifdef __AROS__
+	}
+#endif
+	return retval;
 }
+
diff -ruN -X ./exclude.patterns git-2.17.1/compat/poll/poll.c git-2.17.1.aros/compat/poll/poll.c
--- git-2.17.1/compat/poll/poll.c	2018-05-22 05:28:26.000000000 +0000
+++ git-2.17.1.aros/compat/poll/poll.c	2025-06-07 17:59:15.686349237 +0000
@@ -47,6 +47,10 @@
 # include <stdio.h>
 # include <conio.h>
 #else
+# if defined(__AROS__)
+#  include <proto/socket.h>
+#  include <string.h>
+# endif
 # include <sys/time.h>
 # include <sys/socket.h>
 # ifndef NO_SYS_SELECT_H
diff -ruN -X ./exclude.patterns git-2.17.1/config.mak.uname git-2.17.1.aros/config.mak.uname
--- git-2.17.1/config.mak.uname	2018-05-22 05:28:26.000000000 +0000
+++ git-2.17.1.aros/config.mak.uname	2025-06-07 17:53:34.254350098 +0000
@@ -1,11 +1,13 @@
 # Platform specific Makefile tweaks based on uname detection
 
-uname_S := $(shell sh -c 'uname -s 2>/dev/null || echo not')
-uname_M := $(shell sh -c 'uname -m 2>/dev/null || echo not')
-uname_O := $(shell sh -c 'uname -o 2>/dev/null || echo not')
-uname_R := $(shell sh -c 'uname -r 2>/dev/null || echo not')
-uname_P := $(shell sh -c 'uname -p 2>/dev/null || echo not')
-uname_V := $(shell sh -c 'uname -v 2>/dev/null || echo not')
+UNAME ?= uname
+
+uname_S := $(shell sh -c '$(UNAME) -s 2>/dev/null || echo not')
+uname_M := $(shell sh -c '$(UNAME) -m 2>/dev/null || echo not')
+uname_O := $(shell sh -c '$(UNAME) -o 2>/dev/null || echo not')
+uname_R := $(shell sh -c '$(UNAME) -r 2>/dev/null || echo not')
+uname_P := $(shell sh -c '$(UNAME) -p 2>/dev/null || echo not')
+uname_V := $(shell sh -c '$(UNAME) -v 2>/dev/null || echo not')
 
 ifdef MSVC
 	# avoid the MingW and Cygwin configuration sections
@@ -17,6 +19,24 @@
 # because maintaining the nesting to match is a pain.  If
 # we had "elif" things would have been much nicer...
 
+ifeq ($(uname_S),AROS)
+	BASIC_CFLAGS += -D__BSD_VISIBLE
+	BLK_SHA1 = YesPlease 
+	NO_LIBGEN_H = YesPlease
+	NEEDS_SSL_WITH_CURL = YesPlease
+	NEEDS_CRYPTO_WITH_SSL = YesPlease
+	NEEDS_Z_WITH_SSL = YesPlease
+	NO_POSIX_GOODIES = UnfortunatelyYes
+	# Copied from Windows
+	NO_REGEX = YesPlease
+	NO_GETTEXT = YesPlease
+	NO_PYTHON = YesPlease
+	# Copied from NONSTOP_KERNEL
+	NO_NSEC = YesPlease
+	NO_PREAD = YesPlease
+	NO_MMAP = YesPlease
+	NO_POLL = YesPlease
+endif
 ifeq ($(uname_S),OSF1)
 	# Need this for u_short definitions et al
 	BASIC_CFLAGS += -D_OSF_SOURCE
diff -ruN -X ./exclude.patterns git-2.17.1/configure.ac git-2.17.1.aros/configure.ac
--- git-2.17.1/configure.ac	2018-05-22 05:28:26.000000000 +0000
+++ git-2.17.1.aros/configure.ac	2025-06-07 17:53:34.254350098 +0000
@@ -580,7 +580,7 @@
 
 GIT_STASH_FLAGS($CURLDIR)
 
-AC_CHECK_LIB([curl], [curl_global_init],
+AC_CHECK_HEADER(curl/curl.h,
 [NO_CURL=],
 [NO_CURL=YesPlease])
 
@@ -598,7 +598,8 @@
     GIT_CONF_SUBST([CURL_CONFIG])
     if test -z "${NO_OPENSSL}"; then
       AC_MSG_CHECKING([if Curl supports SSL])
-      if test $(curl-config --features|grep SSL) = SSL; then
+      CURL_CONFIG_CMD=`$CURL_CONFIG --features | grep SSL`
+      if test "$CURL_CONFIG_CMD" = SSL; then
          NEEDS_SSL_WITH_CURL=YesPlease
          AC_MSG_RESULT([yes])
       else
@@ -700,12 +701,20 @@
 
 GIT_CONF_SUBST([NO_DEFLATE_BOUND])
 
+
 #
 # Define NEEDS_SOCKET if linking with libc is not enough (SunOS,
 # Patrick Mauritz).
-AC_CHECK_LIB([c], [socket],
-[NEEDS_SOCKET=],
-[NEEDS_SOCKET=YesPlease])
+case "$target" in
+  *aros)
+    NEEDS_SOCKET=
+  ;;
+  *)
+    AC_CHECK_LIB([c], [socket],
+    [NEEDS_SOCKET=],
+    [NEEDS_SOCKET=YesPlease])
+  ;;
+esac
 GIT_CONF_SUBST([NEEDS_SOCKET])
 test -n "$NEEDS_SOCKET" && LIBS="$LIBS -lsocket"
 
@@ -756,24 +765,31 @@
 # build-time, also set it here for remaining configure-time checks.
 test -n "$NEEDS_RESOLV" && LIBS="$LIBS -lresolv"
 
-AC_CHECK_LIB([c], [basename],
-[NEEDS_LIBGEN=],
-[NEEDS_LIBGEN=YesPlease])
+case "$target" in
+  *aros)
+    NEEDS_SOCKET=
+  ;;
+  *)
+    AC_CHECK_LIB([c], [basename],
+    [NEEDS_LIBGEN=],
+    [NEEDS_LIBGEN=YesPlease])
+  ;;
+esac
 GIT_CONF_SUBST([NEEDS_LIBGEN])
 test -n "$NEEDS_LIBGEN" && LIBS="$LIBS -lgen"
 
 AC_CHECK_LIB([c], [gettext],
-[LIBC_CONTAINS_LIBINTL=YesPlease],
-[LIBC_CONTAINS_LIBINTL=])
-GIT_CONF_SUBST([LIBC_CONTAINS_LIBINTL])
+[NO_GETTEXT=],
+[NO_GETTEXT=YesPlease])
+GIT_CONF_SUBST([NO_GETTEXT])
 
 #
 # Define NO_GETTEXT if you don't want Git output to be translated.
 # A translated Git requires GNU libintl or another gettext implementation
 AC_CHECK_HEADER([libintl.h],
-[NO_GETTEXT=],
-[NO_GETTEXT=YesPlease])
-GIT_CONF_SUBST([NO_GETTEXT])
+[LIBC_CONTAINS_LIBINTL=YesPlease],
+[LIBC_CONTAINS_LIBINTL=])
+GIT_CONF_SUBST([LIBC_CONTAINS_LIBINTL])
 
 if test -z "$NO_GETTEXT"; then
     test -n "$LIBC_CONTAINS_LIBINTL" || LIBS="$LIBS -lintl"
diff -ruN -X ./exclude.patterns git-2.17.1/git-compat-util.h git-2.17.1.aros/git-compat-util.h
--- git-2.17.1/git-compat-util.h	2018-05-22 05:28:26.000000000 +0000
+++ git-2.17.1.aros/git-compat-util.h	2025-06-07 17:53:34.254350098 +0000
@@ -179,12 +179,19 @@
 #include <assert.h>
 #include <regex.h>
 #include <utime.h>
+#ifdef __AROS__
+#define KERNEL
+#endif /* __AROS__ */
 #include <syslog.h>
+#ifndef __AROS__
 #ifndef NO_SYS_POLL_H
 #include <sys/poll.h>
 #else
 #include <poll.h>
 #endif
+#else
+#undef KERNEL
+#endif /* __AROS__ */
 #ifdef HAVE_BSD_SYSCTL
 #include <sys/sysctl.h>
 #endif
@@ -234,6 +241,53 @@
 #define _ALL_SOURCE 1
 #endif
 
+#ifdef __AROS__
+#include <proto/socket.h>
+
+#define fork          vfork
+#define getpagesize() PAGE_SIZE
+
+typedef unsigned int  nfds_t;
+
+#define POLLIN        0x1
+#define POLLOUT       0x4
+#define POLLERR       0x8
+#define POLLHUP       0x10
+#define POLLNVAL      0x20
+
+struct pollfd {
+    int               fd;
+    short             events;
+    short             revents;
+};
+
+static inline int poll(struct pollfd pfd[], nfds_t nfds, int timeout)
+{
+    return (int)nfds;
+}
+
+static inline unsigned int alarm(unsigned int secs)
+{
+    return 0;
+}
+
+static inline void openlog(const char *ident, int option, int facility)
+{
+    return;
+}
+
+static inline void closelog(void)
+{
+    return;
+}
+
+static inline int pthread_sigmask(int how, const sigset_t *set, sigset_t *oldset) 
+{
+    return 0;
+}
+
+#endif
+
 /* used on Mac OS X */
 #ifdef PRECOMPOSE_UNICODE
 #include "compat/precompose_utf8.h"
diff -ruN -X ./exclude.patterns git-2.17.1/Makefile git-2.17.1.aros/Makefile
--- git-2.17.1/Makefile	2018-05-22 05:28:26.000000000 +0000
+++ git-2.17.1.aros/Makefile	2025-06-07 17:53:34.254350098 +0000
@@ -1220,6 +1220,9 @@
 		ifdef NEEDS_CRYPTO_WITH_SSL
 			CURL_LIBCURL += -lcrypto
 		endif
+		ifdef NEEDS_Z_WITH_SSL
+			CURL_LIBCURL += -lz -lzstd
+		endif
 	endif
 	ifdef NEEDS_IDN_WITH_CURL
 		CURL_LIBCURL += -lidn
@@ -1276,6 +1279,9 @@
 	ifdef NEEDS_CRYPTO_WITH_SSL
 		OPENSSL_LIBSSL += -lcrypto
 	endif
+	ifdef NEEDS_Z_WITH_SSL
+		OPENSSL_LIBSSL += -lz -lzstd
+	endif
 else
 	BASIC_CFLAGS += -DNO_OPENSSL
 	OPENSSL_LIBSSL =
@@ -1285,6 +1291,9 @@
 else
 ifdef NEEDS_SSL_WITH_CRYPTO
 	LIB_4_CRYPTO = $(OPENSSL_LINK) -lcrypto -lssl
+	ifdef NEEDS_Z_WITH_SSL
+		LIB_4_CRYPTO += -lz -lzstd
+	endif
 else
 	LIB_4_CRYPTO = $(OPENSSL_LINK) -lcrypto
 endif
@@ -2194,10 +2203,10 @@
 
 git-http-fetch$X: http.o http-walker.o http-fetch.o GIT-LDFLAGS $(GITLIBS)
 	$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \
-		$(CURL_LIBCURL) $(LIBS)
+		$(LIBS) $(CURL_LIBCURL)
 git-http-push$X: http.o http-push.o GIT-LDFLAGS $(GITLIBS)
 	$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \
-		$(CURL_LIBCURL) $(EXPAT_LIBEXPAT) $(LIBS)
+		$(LIBS) $(CURL_LIBCURL) $(EXPAT_LIBEXPAT)
 
 git-remote-testsvn$X: remote-testsvn.o GIT-LDFLAGS $(GITLIBS) $(VCSSVN_LIB)
 	$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) $(LIBS) \
@@ -2367,7 +2376,7 @@
 GIT-PREFIX: FORCE
 	@FLAGS='$(TRACK_PREFIX)'; \
 	if test x"$$FLAGS" != x"`cat GIT-PREFIX 2>/dev/null`" ; then \
-		echo >&2 "    * new prefix flags"; \
+		echo >&2 "    * new prefix flags (=$$FLAGS)"; \
 		echo "$$FLAGS" >GIT-PREFIX; \
 	fi
 
diff -ruN -X ./exclude.patterns git-2.17.1/refs/iterator.c git-2.17.1.aros/refs/iterator.c
--- git-2.17.1/refs/iterator.c	2018-05-22 05:28:26.000000000 +0000
+++ git-2.17.1.aros/refs/iterator.c	2025-06-07 17:53:34.254350098 +0000
@@ -8,6 +8,12 @@
 #include "refs/refs-internal.h"
 #include "iterator.h"
 
+#ifdef __AROS__
+#ifdef select
+#undef select
+#endif
+#endif
+
 int ref_iterator_advance(struct ref_iterator *ref_iterator)
 {
 	return ref_iterator->vtable->advance(ref_iterator);
diff -ruN -X ./exclude.patterns git-2.17.1/transport.c git-2.17.1.aros/transport.c
--- git-2.17.1/transport.c	2018-05-22 05:28:26.000000000 +0000
+++ git-2.17.1.aros/transport.c	2025-06-07 17:53:34.254350098 +0000
@@ -19,6 +19,12 @@
 #include "sigchain.h"
 #include "transport-internal.h"
 
+#ifdef __AROS__
+#ifdef connect
+#undef connect
+#endif
+#endif
+
 static void set_upstreams(struct transport *transport, struct ref *refs,
 	int pretend)
 {
