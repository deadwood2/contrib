diff -ruN sqlite-autoconf-3480000/shell.c sqlite-autoconf-3480000.aros/shell.c
--- sqlite-autoconf-3480000/shell.c	2025-01-14 11:22:34.000000000 +0000
+++ sqlite-autoconf-3480000.aros/shell.c	2025-05-16 12:50:06.552647525 +0000
@@ -656,7 +656,7 @@
   return t;
 }
 
-#if !defined(_WIN32) && !defined(WIN32) && !defined(__minux)
+#if !defined(_WIN32) && !defined(WIN32) && !defined(__minux) && !defined(__AROS__)
 #include <sys/time.h>
 #include <sys/resource.h>
 
@@ -32585,7 +32585,7 @@
   if( home_dir ) return home_dir;
 
 #if !defined(_WIN32) && !defined(WIN32) && !defined(_WIN32_WCE) \
-     && !defined(__RTP__) && !defined(_WRS_KERNEL) && !defined(SQLITE_WASI)
+     && !defined(__RTP__) && !defined(_WRS_KERNEL) && !defined(SQLITE_WASI) && !defined(__AROS__)
   {
     struct passwd *pwent;
     uid_t uid = getuid();
@@ -32607,6 +32607,12 @@
   }
 #endif
 
+#if defined(__AROS__)
+  if (!home_dir) {
+    home_dir = "PROGDIR:";
+  }
+#endif
+
   if (!home_dir) {
     home_dir = getenv("HOME");
   }
@@ -32652,7 +32658,7 @@
 */
 static char *find_xdg_config(void){
 #if defined(_WIN32) || defined(WIN32) || defined(_WIN32_WCE) \
-     || defined(__RTP__) || defined(_WRS_KERNEL)
+     || defined(__RTP__) || defined(_WRS_KERNEL) || defined(__AROS__)
   return 0;
 #else
   char *zConfig = 0;
diff -ruN sqlite-autoconf-3480000/sqlite3.c sqlite-autoconf-3480000.aros/sqlite3.c
--- sqlite-autoconf-3480000/sqlite3.c	2025-01-14 11:22:34.000000000 +0000
+++ sqlite-autoconf-3480000.aros/sqlite3.c	2025-05-16 13:25:07.154035276 +0000
@@ -1,3 +1,6 @@
+
+#define SQLITE_OMIT_WAL
+
 /******************************************************************************
 ** This file is an amalgamation of many separate C source files from SQLite
 ** version 3.48.0.  By combining all the individual C code files into this
@@ -39523,7 +39526,7 @@
   struct vxworksFileId *pCandidate;   /* For looping over existing file IDs */
   int n;                              /* Length of zAbsoluteName string */
 
-  assert( zAbsoluteName[0]=='/' );
+  assert( zAbsoluteName[0]=='/' || strchr(zAbsoluteName, ':');
   n = (int)strlen(zAbsoluteName);
   pNew = sqlite3_malloc64( sizeof(*pNew) + (n+1) );
   if( pNew==0 ) return 0;
@@ -41820,6 +41823,19 @@
     got = osPread64(id->h, pBuf, cnt, offset);
     SimulateIOError( got = -1 );
 #else
+    /* Workaround for issue visible when creating empty database. AROS lseek
+       when seeking beyond end of file will enlarge the file to allow writes to
+       work "beyond" file. This is needed to support GCC. However this confuses
+       sqlite as it now sees zeros at beginning of database file and considers
+       it an invalid database. Avoid writting zeros by avoid calling lseek with
+       position beyong end of file */
+    if(offset == 24 && cnt == 16){
+      newOffset = lseek(id->h, 0, SEEK_END);
+      if( newOffset < offset ){
+        got = 0;
+        break;
+      }
+    }
     newOffset = lseek(id->h, offset, SEEK_SET);
     SimulateIOError( newOffset = -1 );
     if( newOffset<0 ){
@@ -42220,7 +42236,7 @@
   char zDirname[MAX_PATHNAME+1];
 
   sqlite3_snprintf(MAX_PATHNAME, zDirname, "%s", zFilename);
-  for(ii=(int)strlen(zDirname); ii>0 && zDirname[ii]!='/'; ii--);
+  for(ii=(int)strlen(zDirname); ii>0 && zDirname[ii]!='/' && zDirname[ii-1]!=':'; ii--);
   if( ii>0 ){
     zDirname[ii] = '\0';
   }else{
@@ -45138,6 +45154,7 @@
     return;
   }
   pPath->zOut[pPath->nUsed++] = '/';
+  if( pPath->nUsed == 1) pPath->nUsed--;
   memcpy(&pPath->zOut[pPath->nUsed], zName, nName);
   pPath->nUsed += nName;
 #if defined(HAVE_READLINK) && defined(HAVE_LSTAT)
@@ -45214,7 +45231,7 @@
   path.nSymlink = 0;
   path.nOut = nOut;
   path.zOut = zOut;
-  if( zPath[0]!='/' ){
+  if( zPath[0]!='/' && strchr(zPath, ':')==NULL ){
     char zPwd[SQLITE_MAX_PATHLEN+2];
     if( osGetcwd(zPwd, sizeof(zPwd)-2)==0 ){
       return unixLogError(SQLITE_CANTOPEN_BKPT, "getcwd", zPath);
@@ -45331,6 +45348,18 @@
   return nBuf;
 }
 
+/*
+** Write nBuf bytes of random data to the supplied buffer zBuf.
+*/
+static int arosRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){
+  UNUSED_PARAMETER(NotUsed);
+  assert((size_t)nBuf>=(sizeof(time_t)+sizeof(int)));
+  int i;
+  srand(time(NULL));
+  for( i=0; i<nBuf; i++ )
+    zBuf[i] = rand() % 0xFF; 
+  return nBuf;
+}
 
 /*
 ** Sleep for a little while.  Return the amount of time slept.
@@ -46677,7 +46706,7 @@
     unixDlError,          /* xDlError */                    \
     unixDlSym,            /* xDlSym */                      \
     unixDlClose,          /* xDlClose */                    \
-    unixRandomness,       /* xRandomness */                 \
+    arosRandomness,       /* xRandomness */                 \
     unixSleep,            /* xSleep */                      \
     unixCurrentTime,      /* xCurrentTime */                \
     unixGetLastError,     /* xGetLastError */               \
@@ -46695,6 +46724,9 @@
   ** array cannot be const.
   */
   static sqlite3_vfs aVfs[] = {
+#if defined(__AROS__)
+    UNIXVFS("unix-none",     nolockIoFinder ),
+#endif
 #if SQLITE_ENABLE_LOCKING_STYLE && defined(__APPLE__)
     UNIXVFS("unix",          autolockIoFinder ),
 #elif OS_VXWORKS
