diff -ruN sqlite-3.7.3/shell.c sqlite-3.7.3.aros/shell.c
--- sqlite-3.7.3/shell.c	2010-10-07 17:58:13.000000000 +0000
+++ sqlite-3.7.3.aros/shell.c	2025-06-07 13:54:48.470348323 +0000
@@ -53,6 +53,7 @@
 # include <io.h>
 #define isatty(h) _isatty(h)
 #define access(f,m) _access((f),(m))
+#elif defined(__AROS__)
 #else
 /* Make sure isatty() has a prototype.
 */
@@ -67,7 +68,7 @@
 #define isatty(x) 1
 #endif
 
-#if !defined(_WIN32) && !defined(WIN32) && !defined(__OS2__) && !defined(__RTP__) && !defined(_WRS_KERNEL)
+#if !defined(_WIN32) && !defined(WIN32) && !defined(__OS2__) && !defined(__RTP__) && !defined(_WRS_KERNEL) && !defined(__AROS__)
 #include <sys/time.h>
 #include <sys/resource.h>
 
@@ -2165,11 +2166,11 @@
     open_db(p);
     sqlite3_busy_timeout(p->db, atoi(azArg[1]));
   }else
-    
+#if (HAS_TIMER)
   if( HAS_TIMER && c=='t' && n>=5 && strncmp(azArg[0], "timer", n)==0 && nArg==2 ){
     enableTimer = booleanValue(azArg[1]);
   }else
-  
+#endif
   if( c=='w' && strncmp(azArg[0], "width", n)==0 && nArg>1 ){
     int j;
     assert( nArg<=ArraySize(azArg) );
diff -ruN sqlite-3.7.3/sqlite3.c sqlite-3.7.3.aros/sqlite3.c
--- sqlite-3.7.3/sqlite3.c	2010-10-08 02:42:21.000000000 +0000
+++ sqlite-3.7.3.aros/sqlite3.c	2010-10-07 17:58:47.000000000 +0000
@@ -1,3 +1,6 @@
+
+#define SQLITE_OMIT_WAL
+
 /******************************************************************************
 ** This file is an amalgamation of many separate C source files from SQLite
 ** version 3.7.3.  By combining all the individual C code files into this 
@@ -22797,7 +22800,6 @@
 #include <unistd.h>
 #include <sys/time.h>
 #include <errno.h>
-#include <sys/mman.h>
 
 #if SQLITE_ENABLE_LOCKING_STYLE
 # include <sys/ioctl.h>
@@ -23427,7 +23429,7 @@
   struct vxworksFileId *pCandidate;   /* For looping over existing file IDs */
   int n;                              /* Length of zAbsoluteName string */
 
-  assert( zAbsoluteName[0]=='/' );
+  assert( zAbsoluteName[0]=='/' || strchr(zAbsoluteName, ':');
   n = (int)strlen(zAbsoluteName);
   pNew = sqlite3_malloc( sizeof(*pNew) + (n+1) );
   if( pNew==0 ) return 0;
@@ -27132,7 +27134,7 @@
   char zDirname[MAX_PATHNAME+1];
 
   sqlite3_snprintf(MAX_PATHNAME, zDirname, "%s", zFilename);
-  for(ii=(int)strlen(zDirname); ii>1 && zDirname[ii]!='/'; ii--);
+  for(ii=(int)strlen(zDirname); ii>1 && zDirname[ii]!='/' && zDirname[ii-1]!=':'; ii--);
   if( ii>0 ){
     zDirname[ii] = '\0';
     fd = open(zDirname, O_RDONLY|O_BINARY, 0);
@@ -27697,7 +27699,7 @@
   UNUSED_PARAMETER(pVfs);
 
   zOut[nOut-1] = '\0';
-  if( zPath[0]=='/' ){
+  if( zPath[0]=='/' || strchr(zPath, ':') ){
     sqlite3_snprintf(nOut, zOut, "%s", zPath);
   }else{
     int nCwd;
@@ -27814,6 +27816,18 @@
   return nBuf;
 }
 
+/*
+** Write nBuf bytes of random data to the supplied buffer zBuf.
+*/
+static int arosRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){
+  UNUSED_PARAMETER(NotUsed);
+  assert((size_t)nBuf>=(sizeof(time_t)+sizeof(int)));
+  int i;
+  srand(time(NULL));
+  for( i=0; i<nBuf; i++ )
+    zBuf[i] = rand() % 0xFF; 
+  return nBuf;
+}
 
 /*
 ** Sleep for a little while.  Return the amount of time slept.
@@ -29138,7 +29152,7 @@
     unixDlError,          /* xDlError */                    \
     unixDlSym,            /* xDlSym */                      \
     unixDlClose,          /* xDlClose */                    \
-    unixRandomness,       /* xRandomness */                 \
+    arosRandomness,       /* xRandomness */                 \
     unixSleep,            /* xSleep */                      \
     unixCurrentTime,      /* xCurrentTime */                \
     unixGetLastError,     /* xGetLastError */               \
@@ -29153,6 +29167,9 @@
   ** array cannot be const.
   */
   static sqlite3_vfs aVfs[] = {
+#if defined(__AROS__)
+    UNIXVFS("unix-none",     nolockIoFinder ),
+#endif
 #if SQLITE_ENABLE_LOCKING_STYLE && (OS_VXWORKS || defined(__APPLE__))
     UNIXVFS("unix",          autolockIoFinder ),
 #else
