##begin config
basename SDL2
libbase SDL2Base
libbasetype struct SDL2Base
rootbase_field Root
version 1.215
date 17.06.2025
copyright Copyright (C) 2025 The AROS Development Team, 1997-2025 Sam Lantinga
options peropenerbase
rellib posixc
rellib stdc
##end config

##begin cdefprivate
#include "SDL2_intern.h"
##end cdefprivate

##begin cdef
#ifndef SDL_h_
#include <SDL2/SDL.h>
#endif
##end cdef

##begin functionlist
int SDL_Init(Uint32 flags) (D0)
void SDL_GetVersion(SDL_version * ver) (A0)
SDL_version SDL_Linked_Version() ()
void SDL_Quit() ()
int SDL_InitSubSystem(Uint32 flags) (D0)
void SDL_QuitSubSystem(Uint32 flags) (D0)
Uint32 SDL_WasInit(Uint32 flags) (D0)
SDL_Window *SDL_CreateWindow(const char *title, int x, int y, int w, int h, Uint32 flags) (A0, D0, D1, D2, D3, D4)
void SDL_DestroyWindow(SDL_Window *window) (A0)
void SDL_ShowWindow(SDL_Window *window) (A0)
void SDL_HideWindow(SDL_Window *window) (A0)
void SDL_RaiseWindow(SDL_Window *window) (A0)
void SDL_MaximizeWindow(SDL_Window *window) (A0)
void SDL_MinimizeWindow(SDL_Window *window) (A0)
void SDL_RestoreWindow(SDL_Window *window) (A0)
void SDL_SetWindowTitle(SDL_Window *window, const char *title) (A0, A1)
const char *SDL_GetWindowTitle(SDL_Window *window) (A0)
int SDL_GetWindowDisplayIndex(SDL_Window *window) (A0)
void SDL_GetWindowPosition(SDL_Window *window, int *x, int *y) (A0, A1, A2)
void SDL_GetWindowSize(SDL_Window *window, int *w, int *h) (A0, A1, A2)
void SDL_SetWindowPosition(SDL_Window *window, int x, int y) (A0, D0, D1)
void SDL_SetWindowSize(SDL_Window *window, int w, int h) (A0, D0, D1)
SDL_Surface *SDL_GetWindowSurface(SDL_Window *window) (A0)
int SDL_UpdateWindowSurface(SDL_Window *window) (A0)
int SDL_UpdateWindowSurfaceRects(SDL_Window *window, const SDL_Rect *rects, int numrects) (A0, A1, D0)
int SDL_PollEvent(SDL_Event *event) (A0)
int SDL_WaitEvent(SDL_Event *event) (A0)
int SDL_PeepEvents(SDL_Event * events, int numevents, SDL_eventaction act, Uint32 minType, Uint32 maxType) (A0, D0, D1, D2, D3)
int SDL_PushEvent(SDL_Event *event) (A0)
void SDL_PumpEvents() ()
Uint32 SDL_GetTicks() ()
void SDL_Delay(Uint32 ms) (D0)
SDL_Renderer *SDL_CreateRenderer(SDL_Window *window, int index, Uint32 flags) (A0, D0, D1)
int SDL_RenderClear(SDL_Renderer *renderer) (A0)
void SDL_RenderPresent(SDL_Renderer *renderer) (A0)
void SDL_DestroyRenderer(SDL_Renderer *renderer) (A0)
int SDL_SetRenderDrawColor(SDL_Renderer *renderer, Uint8 r, Uint8 g, Uint8 b, Uint8 a) (A0, D0, D1, D2, D3)
int SDL_RenderDrawLine(SDL_Renderer *renderer, int x1, int y1, int x2, int y2) (A0, D0, D1, D2, D3)
int SDL_RenderDrawRect(SDL_Renderer *renderer, const SDL_Rect *rect) (A0, A1)
int SDL_RenderFillRect(SDL_Renderer *renderer, const SDL_Rect *rect) (A0, A1)
int SDL_CreateWindowAndRenderer(int width, int height, Uint32 window_flags, SDL_Window **window, SDL_Renderer **renderer) (D0, D1, D2, A0, A1)
SDL_bool SDL_SetHint(const char *name, const char *value) (A0, A1)
const char *SDL_GetHint(const char *name) (A0)
SDL_RWops *SDL_RWFromFile(const char *file, const char *mode) (A0, A1)
SDL_RWops *SDL_RWFromMem(void *mem, int size) (A0, D0)
SDL_RWops *SDL_AllocRW() ()
void SDL_FreeRW(SDL_RWops *area) (A0)
SDL_Surface *SDL_LoadBMP_RW(SDL_RWops *src, int freesrc) (A0, D0)
int SDL_SaveBMP_RW(SDL_Surface *surface, SDL_RWops *dst, int freedst) (A0, A1, D0)
SDL_Surface *SDL_ConvertSurface(SDL_Surface * src, const SDL_PixelFormat * fmt, Uint32 flags) (A0, A1, D0)
SDL_Surface *SDL_DisplayFormat(SDL_Surface *surface) (A0)
SDL_Surface *SDL_DisplayFormatAlpha(SDL_Surface *surface) (A0)
void SDL_FreeSurface(SDL_Surface *surface) (A0)
int SDL_SetColorKey(SDL_Surface * surface, int flag, Uint32 key) (A0, D0, D1)
int SDL_SetAlpha(SDL_Surface *surface, Uint32 flag, Uint8 alpha) (A0, D0, D1)
int SDL_FillRect(SDL_Surface * dst, const SDL_Rect * rect, Uint32 color) (A0, A1, D0)
int SDL_UpperBlit(SDL_Surface * src, const SDL_Rect * srcrect, SDL_Surface * dst, SDL_Rect * dstrect) (A0, A1, A2, A3)
int SDL_LowerBlit(SDL_Surface *src, SDL_Rect *srcrect, SDL_Surface *dst, SDL_Rect *dstrect) (A0, A1, A2, A3)
int SDL_NumJoysticks() ()
const char *SDL_JoystickName(SDL_Joystick *joystick) (A0)
SDL_Joystick *SDL_JoystickOpen(int device_index) (D0)
int SDL_JoystickOpened(int device_index) (D0)
int SDL_JoystickIndex(SDL_Joystick *joystick) (A0)
int SDL_JoystickNumAxes(SDL_Joystick *joystick) (A0)
int SDL_JoystickNumBalls(SDL_Joystick *joystick) (A0)
int SDL_JoystickNumHats(SDL_Joystick *joystick) (A0)
int SDL_JoystickNumButtons(SDL_Joystick *joystick) (A0)
void SDL_JoystickUpdate() ()
int SDL_JoystickEventState(int state) (D0)
Sint16 SDL_JoystickGetAxis(SDL_Joystick *joystick, int axis) (A0, D0)
Uint8 SDL_JoystickGetHat(SDL_Joystick *joystick, int hat) (A0, D0)
int SDL_JoystickGetBall(SDL_Joystick *joystick, int ball, int *dx, int *dy) (A0, D0, A1, A2)
Uint8 SDL_JoystickGetButton(SDL_Joystick *joystick, int button) (A0, D0)
void SDL_JoystickClose(SDL_Joystick *joystick) (A0)
int SDL_SetClipboardText(const char *text) (A0)
char *SDL_GetClipboardText() ()
SDL_bool SDL_HasClipboardText() ()
SDL_AudioSpec *SDL_LoadWAV_RW(SDL_RWops *src, int freesrc, SDL_AudioSpec *spec, Uint8 **audio_buf, Uint32 *audio_len) (A0, D0, A1, A2, A3)
void SDL_FreeWAV(Uint8 *audio_buf) (A0)
int SDL_OpenAudio(SDL_AudioSpec *desired, SDL_AudioSpec *obtained) (A0, A1)
void SDL_PauseAudio(int pause_on) (D0)
SDL_AudioStatus SDL_GetAudioStatus() ()
void SDL_CloseAudio() ()
SDL_TimerID SDL_AddTimer(Uint32 interval, SDL_TimerCallback callback, void *param) (D0, A0, A1)
SDL_bool SDL_RemoveTimer(SDL_TimerID t) (D0)
int SDL_SetTimer(Uint32 interval, SDL_TimerCallback callback) (D0, A0)
SDL_sem *SDL_CreateSemaphore(Uint32 initial_value) (D0)
void SDL_DestroySemaphore(SDL_sem *sem) (A0)
int SDL_SemWait(SDL_sem *sem) (A0)
int SDL_SemTryWait(SDL_sem *sem) (A0)
int SDL_SemWaitTimeout(SDL_sem *sem, Uint32 toval) (A0, D0)
int SDL_SemPost(SDL_sem *sem) (A0)
Uint32 SDL_SemValue(SDL_sem *sem) (A0)
SDL_mutex *SDL_CreateMutex() ()
void SDL_DestroyMutex(SDL_mutex *mutex) (A0)
int SDL_LockMutex(SDL_mutex *mutex) (A0)
int SDL_UnlockMutex(SDL_mutex *mutex) (A0)
SDL_cond *SDL_CreateCond() ()
void SDL_DestroyCond(SDL_cond *cond) (A0)
int SDL_CondSignal(SDL_cond *cond) (A0)
int SDL_CondBroadcast(SDL_cond *cond) (A0)
int SDL_CondWait(SDL_cond *cond, SDL_mutex *mutex) (A0, A1)
int SDL_CondWaitTimeout(SDL_cond *cond, SDL_mutex *mutex, Uint32 toval) (A0, A1, D0)
int SDL_GetNumAudioDevices(int iscapture) (D0)
const char *SDL_GetAudioDeviceName(int index, int iscapture) (D0, D1)
SDL_AudioDeviceID SDL_OpenAudioDevice(const char *device, int iscapture, const SDL_AudioSpec *desired, SDL_AudioSpec *obtained, int allowed_changes) (A0, D0, A1, A2, D1)
void SDL_CloseAudioDevice(SDL_AudioDeviceID dev) (D0)
void SDL_PauseAudioDevice(SDL_AudioDeviceID dev, int pause_on) (D0, D1)
Uint32 SDL_GetMouseState(int *x, int *y) (A0, A1)
Uint32 SDL_GetRelativeMouseState(int *x, int *y) (A0, A1)
void SDL_WarpMouseInWindow(SDL_Window *window, int x, int y) (A0, D0, D1)
int SDL_SetRelativeMouseMode(SDL_bool enabled) (D0)
SDL_bool SDL_GetRelativeMouseMode() ()
int SDL_ShowCursor(int toggle) (D0)
SDL_Cursor *SDL_GetCursor() ()
void SDL_FreeCursor(SDL_Cursor *cursor) (A0)
SDL_Cursor *SDL_CreateSystemCursor(SDL_SystemCursor id) (D0)
SDL_Cursor *SDL_CreateColorCursor(SDL_Surface *surface, int hot_x, int hot_y) (A0, D0, D1)
void SDL_SetCursor(SDL_Cursor *cursor) (A0)
int SDL_GetNumVideoDisplays() ()
const char *SDL_GetDisplayName(int displayIndex) (D0)
int SDL_GetDisplayBounds(int displayIndex, SDL_Rect *rect) (D0, A0)
int SDL_GetDisplayDPI(int displayIndex, float *ddpi, float *hdpi, float *vdpi) (D0, A0, A1, A2)
int SDL_SetWindowFullscreen(SDL_Window *window, Uint32 flags) (A0, D0)
int SDL_SetRenderTarget(SDL_Renderer *renderer, SDL_Texture *texture) (A0, A1)
int SDL_RenderCopy(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_Rect *srcrect, const SDL_Rect *dstrect) (A0, A1, A2, A3)
int SDL_RenderCopyEx(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_Rect *srcrect, const SDL_Rect *dstrect, const double angle, const SDL_Point *center, const SDL_RendererFlip flip) (A0, A1, A2, A3, D0, A4, D1)
int SDL_RenderDrawPoint(SDL_Renderer *renderer, int x, int y) (A0, D0, D1)
int SDL_RenderDrawPoints(SDL_Renderer *renderer, const SDL_Point *points, int count) (A0, A1, D0)
int SDL_RenderDrawLines(SDL_Renderer *renderer, const SDL_Point *points, int count) (A0, A1, D0)
SDL_Texture *SDL_CreateTexture(SDL_Renderer *renderer, Uint32 format, int access, int w, int h) (A0, D0, D1, D2, D3)
void SDL_DestroyTexture(SDL_Texture *texture) (A0)
int SDL_SetRenderDrawBlendMode(SDL_Renderer *renderer, SDL_BlendMode blendMode) (A0, D0)
int SDL_RenderReadPixels(SDL_Renderer *renderer, const SDL_Rect *rect, Uint32 format, void *pixels, int pitch) (A0, A1, D0, A2, D1)
.skip 1
#void SDL_Log(const char *fmt, ...) (A0, ...)
void SDL_LogSetAllPriority(SDL_LogPriority priority) (D0)
SDL_LogPriority SDL_LogGetPriority(int category) (D0)
.skip 1
#void SDL_LogMessage(int category, SDL_LogPriority priority, const char *fmt, ...) (D0, D1, A0, ...)
SDL_RWops *SDL_RWFromConstMem(const void *mem, int size) (A0, D0)
void SDL_ClearError() ()
const char *SDL_GetError() ()
.skip 1
#int SDL_SetError(const char *fmt, ...) (A0, ...)
int SDL_SetWindowOpacity(SDL_Window *window, float opacity) (A0, D0)
int SDL_GetWindowOpacity(SDL_Window *window, float *opacity) (A0, A1)
int SDL_GetNumVideoDrivers() ()
const char *SDL_GetVideoDriver(int index) (D0)
int SDL_GetNumRenderDrivers() ()
int SDL_GetRenderDriverInfo(int index, SDL_RendererInfo *info) (D0, A0)
int SDL_SetTextureColorMod(SDL_Texture *texture, Uint8 r, Uint8 g, Uint8 b) (A0, D0, D1, D2)
int SDL_SetTextureAlphaMod(SDL_Texture *texture, Uint8 alpha) (A0, D0)
int SDL_SetTextureBlendMode(SDL_Texture *texture, SDL_BlendMode blendMode) (A0, D0)
int SDL_GetRenderDrawBlendMode(SDL_Renderer *renderer, SDL_BlendMode *blendMode) (A0, A1)
void SDL_SetWindowBordered(SDL_Window * window, SDL_bool bordered) (A0, D0)
SDL_GLContext SDL_GL_CreateContext(SDL_Window *window) (A0)
int SDL_GL_MakeCurrent(SDL_Window *window, SDL_GLContext context) (A0, D0)
void SDL_GL_DeleteContext(SDL_GLContext context) (D0)
int SDL_GL_SetSwapInterval(int interval) (D0)
int SDL_GL_GetSwapInterval() ()
void SDL_GL_SwapWindow(SDL_Window *window) (A0)
##end functionlist
