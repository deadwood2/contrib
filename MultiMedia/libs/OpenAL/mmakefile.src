#   $Id$
#
#   Generate libopenal.a
#

include $(SRCDIR)/config/aros-contrib.cfg

#MM- contrib-multimedia : contrib-openal

#MM- contrib-openal : contrib-openal-linklib contrib-openal-library
#MM- contrib-openal-common : includes contrib-openal-includes workbench-devs-AHI contrib-openal-genfiles

#MM contrib-openal-linklib : contrib-openal-common
#MM contrib-openal-library : contrib-openal-common

OPENAL_VERSION := 1.16.0
#OPENAL_VERSION := 1.19.1
OPENALREPOSITORIES = http://openal-soft.org/openal-releases
OPENALARCHBASE     := openal-soft-$(OPENAL_VERSION)
OPENALARCHSUFFIX := "tar.bz2"
OPENALPATCHSPEC := $(OPENALARCHBASE)-aros.diff:$(OPENALARCHBASE):-f,-p1
OPENALARCHSRCDIR := $(PORTSDIR)/openal-soft/$(OPENALARCHBASE)

%fetch mmake=contrib-openal-fetch archive=$(OPENALARCHBASE) destination=$(PORTSDIR)/openal-soft \
    location=$(PORTSSOURCEDIR) archive_origins=$(OPENALREPOSITORIES) suffixes=$(OPENALARCHSUFFIX) \
    patches_specs=$(OPENALPATCHSPEC)

%create_patch mmake=contrib-openal-create-patch \
    archive=$(OPENALARCHBASE) suffixes=$(OPENALARCHSUFFIX) \
    srcdir="openal-soft-$(OPENAL_VERSION)" destination=$(PORTSDIR)/openal-soft

OPENAL_VERSION_MAJOR = $(shell echo "$(OPENAL_VERSION)" | cut -d"." -f1)
OPENAL_VERSION_MINOR = $(shell echo "$(OPENAL_VERSION)" | cut -d"." -f2)
OPENAL_VERSION_PATCH = $(shell echo "$(OPENAL_VERSION)" | cut -d"." -f3)

ifeq ($(shell [ $(OPENAL_VERSION_MAJOR) -lt 2 ] && echo true),true)
ifeq ($(shell [ $(OPENAL_VERSION_MINOR) -lt 20 ] && echo true),true)
OPENALC_CCODE=yes
ifeq ($(shell [ $(OPENAL_VERSION_MINOR) -lt 18 ] && echo true),true)
USER_CPPFLAGS+= -DALSOFT_VERSION=\"$(OPENAL_VERSION)\"
endif
endif
endif

USER_INCLUDES := \
        -I$(GENDIR)/$(CURDIR) \
        -I$(SRCDIR)/$(CURDIR) \
        -I$(OPENALARCHSRCDIR) \
        -iquote $(OPENALARCHSRCDIR)/include
ifeq ($(OPENALC_CCODE),yes)
USER_INCLUDES += \
        -I$(OPENALARCHSRCDIR)/OpenAL32/Include \
        -I$(OPENALARCHSRCDIR)/Alc
ifeq ($(shell [ $(OPENAL_VERSION_MINOR) -gt 16 ] && echo true),true)
USER_INCLUDES += \
        -I$(OPENALARCHSRCDIR)/common
USER_CPPFLAGS += -D_GNU_SOURCE=1
endif
else
USER_INCLUDES += \
        -I$(OPENALARCHSRCDIR)/alc
endif

NOWARN_FLAGS := $(NOWARN_ARRAY_BOUNDS) $(NOWARN_VOLATILE_REGISTER_VAR)
USER_CFLAGS := $(CFLAGS_GNU99) $(CFLAGS_FAST_MATH) -Wall $(NOWARN_FLAGS) -DAL_ALEXT_PROTOTYPES 
# This is needed for inline functions (ReadRef & Co.) to be actually compiled in --enable-debug builds
OPTIMIZATION_CFLAGS += -O2

ifeq ($(OPENALC_CCODE),yes)
OPENAL32_FILES = \
        alAuxEffectSlot \
        alBuffer \
        alEffect \
        alError \
        alExtension \
        alFilter \
        alListener \
        alSource \
        alState \
        sample_cvt

ifeq ($(shell [ $(OPENAL_VERSION_MINOR) -lt 18 ] && echo true),true)
OPENAL32_FILES += \
        alFontsound \
        alMidi \
        alPreset \
        alSoundfont \
        alThunk
else
OPENAL32_FILES += \
        event
        
COMMON_FILES += \
        alcomplex \
        almalloc \
        atomic
endif

ifeq ($(shell [ $(OPENAL_VERSION_MINOR) -lt 19 ] && echo true),true)
ALC_MIXER_FILES += \
        mixer \
        mixer_c
ifeq ($(AROS_TARGET_CPU),x86_64)
ALC_MIXER_FILES += \
        mixer_sse \
        mixer_sse2
ifeq ($(shell [ $(OPENAL_VERSION_MINOR) -gt 16 ] && echo true),true)
ALC_MIXER_FILES += \
        mixer_sse3
endif
#ALC_MIXER_FILES += \
#        mixer_sse41
TARGET_ISA_CFLAGS += -msse -mfpmath=sse
endif
else
ALC_MIXER_FILES += \
        mixer/mixer_c
ifeq ($(AROS_TARGET_CPU),x86_64)
ALC_MIXER_FILES += \
        mixer/mixer_sse \
        mixer/mixer_sse2 \
        mixer/mixer_sse3
#ALC_MIXER_FILES += mixer/mixer_sse41
TARGET_ISA_CFLAGS += -msse -mfpmath=sse
endif
endif

ALC_FILES = \
        ALc \
        ALu \
        bs2b \
        helpers \
        hrtf \
        $(ALC_MIXER_FILES) \
        panning

ifeq ($(shell [ $(OPENAL_VERSION_MINOR) -lt 19 ] && echo true),true)
ALC_FILES += \
        alcConfig
else
ALC_FILES += \
        alconfig \
        converter \
        mastering \
        ringbuffer \
        uhjfilter \
        ambdec \
        bformatdec \
        mixvoice
endif

ALCEFFECTS_FILES = \
        autowah \
        chorus \
        compressor \
        dedicated \
        distortion \
        echo \
        equalizer \
        modulator \
        reverb

ifeq ($(shell [ $(OPENAL_VERSION_MINOR) -lt 19 ] && echo true),true)
ALCEFFECTS_FILES += \
        ef_null \
        flanger
else
ALCEFFECTS_FILES += \
        fshifter \
        pshifter
endif

ifeq ($(shell [ $(OPENAL_VERSION_MINOR) -lt 18 ] && echo true),true)
ALCMIDI_FILES = \
        m_base \
        dummy \
        fluidsynth \
        sf2load \
        soft
endif

ALCBACKEND_FILES = \
        ahi \
        base \
        null \
        loopback \
        wave

COMMON_FILES += \
        threads \
        rwlock \
        uintmap

OPENAL_FILES = \
        $(addprefix OpenAL32/, $(OPENAL32_FILES)) \
        $(addprefix Alc/, $(ALC_FILES)) \
        $(addprefix Alc/backends/, $(ALCBACKEND_FILES)) \
        $(addprefix Alc/effects/, $(ALCEFFECTS_FILES)) \
        $(addprefix common/, $(COMMON_FILES))
ifeq ($(shell [ $(OPENAL_VERSION_MINOR) -lt 18 ] && echo true),true)
OPENAL_FILES += \
        $(addprefix Alc/midi/, $(ALCMIDI_FILES))
else
OPENAL_GENFILES=$(GENDIR)/$(CURDIR)/version.h
ifeq ($(shell [ $(OPENAL_VERSION_MINOR) -gt 18 ] && echo true),true)
ALCFILTER_FILES += \
        filter \
        nfc \
        splitter
OPENAL_FILES += \
        $(addprefix Alc/filters/, $(ALCFILTER_FILES))
OPENAL_GENFILES += $(GENDIR)/$(CURDIR)/bsinc_inc.h
endif
endif

$(GENDIR)/$(CURDIR)/ef_null.c : $(OPENALARCHSRCDIR)/Alc/effects/null.c | $(GENDIR)/$(CURDIR)
	$(Q)cp $< $@

OPENAL_GENFILES += $(GENDIR)/$(CURDIR)/ef_null.c
OPENAL_CFILES = $(addprefix $(OPENALARCHSRCDIR)/,$(OPENAL_FILES))
ifeq ($(shell [ $(OPENAL_VERSION_MINOR) -gt 16 ] && echo true),true)
OPENAL_CFILES += $(GENDIR)/$(CURDIR)/ef_null
endif
else

endif

%build_linklib mmake=contrib-openal-linklib libname=openal.static usetree=yes \
    files="$(OPENAL_CFILES)" cxxfiles="$(OPENAL_CXXFILES)" objdir=$(OBJDIR)/static

%build_module mmake=contrib-openal-library modname=openal \
    modtype=library files="$(OPENAL_CFILES)" cxxfiles="$(OPENAL_CXXFILES)" uselibs="pthread crtmod"

OPENAL_VERSION_DEPS+=$(SRCDIR)/$(CURDIR)/mmakefile.src
$(GENDIR)/$(CURDIR)/version.h: $(OPENAL_VERSION_DEPS) | $(GENDIR)/$(CURDIR)
	$(Q)$(IF) $(TEST) -f $(OPENALARCHSRCDIR)/version.h.in ; then \
		$(SED) -e 's#$${LIB_VERSION}#$(OPENAL_VERSION)#g' \
			-e 's#$${GIT_BRANCH}#UNKNOWN#g' \
			-e 's#$${GIT_COMMIT_HASH}#unknown#g' \
			$(OPENALARCHSRCDIR)/version.h.in > $@ ; \
	fi

#MM- contrib-openal : contrib-openal-utils
#MM- contrib-openal-utils : contrib-openal-library

#MM
contrib-openal-genfiles : $(OPENAL_GENFILES)
	$(Q)$(NOP)

%build_prog mmake=contrib-openal-bsincgen \
    progname=bsincgen compiler=host \
    targetdir=$(HOSTGENDIR)/$(CURDIR) \
    objdir=$(HOSTGENDIR)/$(CURDIR)/native-tools files="$(addprefix $(OPENALARCHSRCDIR)/native-tools/,bsincgen)" uselibs="m"

$(GENDIR)/$(CURDIR)/bsinc_inc.h: $(HOSTGENDIR)/$(CURDIR)/bsincgen
	$(Q)$(ECHO) "Generating bsinc_inc.h"
	$(Q)$< $@

#MM contrib-openal-bsincgen : contrib-openal-fetch

#
#  Targets to build the test(s)
#

FILES   :=  openal-info
EXEDIR  := $(AROS_TESTS)/OpenAL

USER_INCLUDES := -I$(AROS_INCLUDES)/SDL -I$(AROS_CONTRIB_INCLUDES)

%build_progs mmake=contrib-openal-utils \
    targetdir=$(EXEDIR) \
    files="$(addprefix $(OPENALARCHSRCDIR)/utils/,$(FILES))" uselibs="openal pthread"

#
#  Targets to build the examples(s)
#

##MM- contrib-openal : contrib-openal-examples
#MM- openal-example-deps : contrib-openal-library contrib-sdl-sdl-sound contrib-ffmpeg

#MM openal-examples-alffplay : openal-example-deps
#MM openal-examples-allatency : openal-example-deps
#MM openal-examples-alloopback : openal-example-deps
#MM openal-examples-alreverb : openal-example-deps
#MM openal-examples-alstream : openal-example-deps

##MM- contrib-openal-examples : openal-examples-alffplay
#MM- contrib-openal-examples : openal-examples-allatency openal-examples-alloopback openal-examples-alreverb openal-examples-alstream
##MM- contrib-openal-examples-quick : openal-examples-alffplay-quick
#MM- contrib-openal-examples-quick : openal-examples-allatency-quick openal-examples-alloopback-quick openal-examples-alreverb-quick openal-examples-alstream-quick

EXEDIR  := $(AROS_TESTS)/OpenAL

OALECOMMONFILES := common/alhelpers common/sdl_sound

ALFFPLAYFILES   := alffplay $(OALECOMMONFILES)
ALLATENCYFILES  := allatency $(OALECOMMONFILES)
ALLOOPBACKFILES := alloopback $(OALECOMMONFILES)
ALREVERBFILES   := alreverb $(OALECOMMONFILES)
ALSTREAMFILES   := alstream $(OALECOMMONFILES)

USER_INCLUDES := -I$(AROS_INCLUDES)/SDL -I$(AROS_CONTRIB_INCLUDES) -iquote $(OPENALARCHSRCDIR)/include

%build_prog mmake=openal-examples-alffplay \
    progname=alffplay targetdir=$(EXEDIR) \
    files="$(addprefix $(OPENALARCHSRCDIR)/examples/,$(ALFFPLAYFILES))" \
    uselibs="SDL_sound SDL mikmod speex vorbis ogg openal pthread"

%build_prog mmake=openal-examples-allatency \
    progname=allatency targetdir=$(EXEDIR) \
    files="$(addprefix $(OPENALARCHSRCDIR)/examples/,$(ALLATENCYFILES))" \
    uselibs="SDL_sound SDL mikmod speex vorbis ogg openal pthread"

%build_prog mmake=openal-examples-alloopback \
    progname=alloopback targetdir=$(EXEDIR) \
    files="$(addprefix $(OPENALARCHSRCDIR)/examples/,$(ALLOOPBACKFILES))" \
    uselibs="SDL_sound SDL mikmod speex vorbis ogg openal pthread"

%build_prog mmake=openal-examples-alreverb \
    progname=alreverb targetdir=$(EXEDIR) \
    files="$(addprefix $(OPENALARCHSRCDIR)/examples/,$(ALREVERBFILES))" \
    uselibs="SDL_sound SDL mikmod speex vorbis ogg openal pthread"

%build_prog mmake=openal-examples-alstream \
    progname=alstream targetdir=$(EXEDIR) \
    files="$(addprefix $(OPENALARCHSRCDIR)/examples/,$(ALSTREAMFILES))" \
    uselibs="SDL_sound SDL mikmod speex vorbis ogg openal pthread"

#
#  Targets to copy includes
#

#MM contrib-openal-includes : setup contrib-openal-fetch
#MM- includes-copy : contrib-openal-includes

INCLUDE_FILES := alc.h alext.h al.h efx.h efx-creative.h efx-presets.h
%copy_includes mmake=contrib-openal-includes dir=$(OPENALARCHSRCDIR)/include/AL path=AL includes=$(INCLUDE_FILES)

%common
